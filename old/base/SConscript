# -*- Mode: Python -*-

import os
import subprocess

# Uncomment this to get ccache-like behaviour.
# CacheDir(".objcache")

# Uncomment this to optimizing build system performance by sacrificing
# accuracy. Does not help a lot. YMMV.
# SourceSignatures('timestamp')
# TargetSignatures('timestamp')
# SetOption('implicit_cache', 1)

# Collect output of external programs

def collect_output(cmd):
    return subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]

def chomp(line):
    if line and line[-1] == '\n':
        line = line[:-1]
    return line

# Custom configure checks

# XXX There must be something builtin to solve this...
cxx_test_source = """int main() { return 0; }"""
def CheckCXXLink(context):
    context.Message('Check if we can link a program...')
    result = context.TryLink("""int main() { return 0; }""", '.cc')
    context.Result(result)
    return result

# Add flag to env[key] if the compiler is able to build an object file
# with this. extension can be '.c' or '.cc'.
def AddOptionalFlag(context, extension, key, flag):
    context.Message('Check if compiler supports "%s"... ' % flag)
    old_var = context.env[key];
    context.env[key] += flag + ' '
    result = context.TryCompile('', extension)
    context.Result(result)
    if not result:
        context.env[key] = old_var
    return result

# Compilation flags

# Compiler override
target_cc   = ARGUMENTS.get('target_cc')
target_cxx  = ARGUMENTS.get('target_cxx')
default_target_arch = "core2"
target_arch = ARGUMENTS.get('target_arch')
ld_path     = ARGUMENTS.get('ld_path')
prepend_path = ARGUMENTS.get('prepend_path')
# Optimization flags

debug = ARGUMENTS.get('debug', 0)
if int(debug):
    debug_opts = ' -g -O1 '
else:
    debug_opts = ' -g -Os -fomit-frame-pointer '

ndebug = ARGUMENTS.get('ndebug', 0)
if int(ndebug):
    debug_opts += ' -DNDEBUG  -Wno-unused-variable -Wno-unused-but-set-variable '

# Default environment for host machine. Use this to build host tools,
# that need to run during the build.
host_env = Environment()
host_env["CCFLAGS"]  = "-g -Wall " + debug_opts
host_env["CXXFLAGS"] = "-std=c++0x -Weffc++ "
host_env["CFLAGS"]   = "-std=c99 "

# Populate host_env with necessary environment variables for poor
# people behind proxies.

for env in [ 'SSH_AUTH_SOCK', 'http_proxy', 'https_proxy', 'ftp_proxy', 'no_proxy',
             'GIT_PROXY_COMMAND' ]:
    if env in os.environ:
        host_env['ENV'][env] = os.environ[env];

# Environment for utilities that are put on custom build Linux
# initrds.
initrd32_works = True
initrd32_env = host_env.Clone()
initrd32_env.Append(CCFLAGS   = " -m32 ",
                    LINKFLAGS = " -m32 -static ");

conf = Configure(initrd32_env, custom_tests = {'CheckCXXLink' : CheckCXXLink,
                                               'AddOptionalFlag' : AddOptionalFlag})

if not (conf.CheckCXX() and conf.CheckCC() and conf.CheckCXXLink()):
    print("Your compiler cannot build 32-bit host utilities. m(")
    initrd32_works = False

initrd32_env = conf.Finish()

# Freestanding environment for IA-32. Use this to build standalone
# binaries.
target_env = Environment()

if ARGUMENTS.get('VERBOSE') != "1":
    target_env.Append(CCCOMSTR  = "\tCC  $TARGET", CXXCOMSTR  = "\tCXX $TARGET", LINKCOMSTR = "\tLNK $TARGET",
                      ASCOMSTR  = "\tAS  $TARGET", ARCOMSTR  = "\tAR  $TARGET", RANLIBCOMSTR  = "\tLIB $TARGET",
                      ASPPCOMSTR = "\tASC $TARGET",
                      )

if target_cc:
    print("Target CC forced to '%s'." % target_cc)
    if not target_cxx:
        print("!!! You probably want to set a proper target_cxx !!!")
    target_env['CC'] = target_cc

if target_cxx:
    print("Target CXX forced to '%s'." % target_cxx)
    if not target_cc:
        print("!!! You probably want to set a proper target_cc !!!")
    target_env['CXX'] = target_cxx

if ld_path:
    print("Add LD_LIBRARY_PATH = '%s' to Target env" % ld_path)
    target_env['ENV']['LD_LIBRARY_PATH'] = ld_path

if prepend_path:
    print("Target PATH starts with '%s'" % prepend_path)
    target_env['ENV']['PATH'] = prepend_path + ":" + target_env['ENV']['PATH'] 

target_env['CCFLAGS'] = '-m32 '
target_env.Append(CCFLAGS = '-mregparm=3 -pipe -nostdlib -ffreestanding -ffunction-sections -fshort-enums -fno-strict-aliasing -fno-exceptions  -minline-all-stringops -nostdinc -Wall -Winit-self -Wextra -Wno-parentheses -Wno-unused-parameter -Wswitch-enum -Wstrict-aliasing=2 -Wmissing-noreturn')
target_env.Append(CCFLAGS = debug_opts)
if ARGUMENTS.get('NO_TIMESTAMP', 0):
    target_env.Append(CPPFLAGS = '-DNO_TIMESTAMP')

if target_arch:
    target_env.Append(CCFLAGS = (" -march=%s " % target_arch))
else:
    print("No target_arch option given. Defaulting to %s." % default_target_arch)
    target_env.Append(CCFLAGS = (" -march=%s " % default_target_arch))

target_env['CXXFLAGS'] = "-fno-exceptions -fno-rtti -fcheck-new -Wold-style-cast "
target_env['CFLAGS'] = "-Wimplicit-function-declaration "
target_env['ASFLAGS'] = "-m32 -pipe -g"
target_env['LINK'] = "ld"
target_env['LINKFLAGS'] = ["-m",  "elf_i386", "-gc-sections", "-N", "--whole-archive", "--warn-common"]

if ARGUMENTS.get('MAP'):
    target_env.Append(LINKFLAGS = ['-Map=${TARGET}.map'])

target_env['CPPPATH'] = [chomp(collect_output([target_env['CXX'], "-print-file-name=include"])),
                         "#include"]

target_env['LIBPATH'] = ['#bin/lib']

conf = Configure(target_env, custom_tests = { 'AddOptionalFlag' : AddOptionalFlag })

if (not conf.AddOptionalFlag('.cc', 'CXXFLAGS', '-std=gnu++0x')) or \
   (not conf.AddOptionalFlag('.cc', 'CFLAGS', '-std=gnu99')):
    print("Your compiler is too old.")
    Exit(1)

conf.AddOptionalFlag('.cc', 'CCFLAGS', '-mpreferred-stack-boundary=4 -mincoming-stack-boundary=4')
conf.AddOptionalFlag('.cc', 'CXXFLAGS', '-fno-threadsafe-statics')

target_env = conf.Finish()

# We want to be able to use linker scripts without doing a manual
# Depends().

def link(env, target, source, linkscript=None, **rest):
    if linkscript:
        linkscript = File(linkscript)
        # XXX rstr() does not work if linkscript is in the current
        # repository, i.e. the repository in which you typed `scons'.
        add_ld = ["-T", linkscript.rstr()]
    else:
        add_ld = []
    p = env.Program(target + ".debug", source,
                    LINKFLAGS=env['LINKFLAGS'] + add_ld,
                    **rest)
    g = env.Command(target, p,
                    [ "@strip -o $TARGET $SOURCE",
                      "@size $TARGET",
                      ])
    # Explicitly add linkscript to the dependencies.
    if linkscript:
        env.Depends(p, linkscript)
    # Always put both the debug and the final version in the current
    # directory. Even if they are already built elsewhere.
    Local(p)
    Local(g)
    return g

target_env.AddMethod(link, "Link")

# Export our environments. Should be cloned before changing them.
Export('host_env')

Export('initrd32_env')
Export('initrd32_works')

Export('target_env')
Export('debug_opts')

SConscript(Glob('*/SConscript'))
SConscript(Glob('*/*/SConscript'))

# EOF
