#!/usr/bin/perl -w
#
# WvTest:
#   Copyright (C)2007-2009 Versabanq Innovations Inc. and contributors.
#       Licensed under the GNU Library General Public License, version 2.
#       See the included file named LICENSE for license information.
#
use strict;
use Time::HiRes qw(time);

# always flush
$| = 1;

if (@ARGV < 1) {
    print STDERR "Usage: $0 <command line...>\n";
    exit 127;
}

print STDERR "Testing \"all\" in @ARGV:\n";

# use POSIX;
# setpgrp();
# POSIX::tcsetpgrp(1, $$) || die("tcsetpgrp($$) failed: $!\n");

my $pid = open(my $fh, "-|");
if (!$pid) {
    # child
#    setpgrp(); # Terminal won't send signals to the child
    open STDERR, '>&STDOUT' or die("Can't dup stdout: $!\n");
    print(join(" ",@ARGV), "\n");
    exec(@ARGV);
    exit 126; # just in case
}

my $istty = -t STDOUT && $ENV{'TERM'} ne "dumb";
my $columns;
if ($istty) {
    $columns = `tput cols`;
} else {
    $columns = 80;
}

my @log = ();
my ($gpasses, $gfails) = (0,0);
my $column = 0;
my $timeout = 120;
my $died = 0;

sub bigkill($$)
{
    my($sig, $pid) = @_;
    ($pid > 0) || die("pid is '$pid'?!\n");

#     print "bigkill $pid\n";
#     my $cmd = 'pstree -p '.getpgrp(0).'|grep -o "[0-9]\+"';
#     my @pids = `$cmd`;
#     chomp(@pids);
#     system("ps --pid ".join(',',@pids)." --forest -o pid,pgid,stat,cmd");
    $SIG{TERM} = 'IGNORE';
    local $SIG{CHLD} = sub { $died = 1; }; # this will wake us from sleep() faster
    # Send TERM to our process group (this includes us, hopefully all children and maybe some of our parents)
    kill 15, -getpgrp(0);
    sleep(2);

    if (!$died) {
	if ($pid > 1) { kill 9, -$pid; }
	kill 9, $pid;
    }
    if (@log) {
        print_and_clear_log();
    }
    print "\n";
    print STDERR resultline('', "Killed by signal $sig", "FAILED")."\n";
}

my $timedout = 0;
# parent
local $SIG{INT} = sub { bigkill(shift, $pid); exit(125); };
local $SIG{TERM} = sub { bigkill(shift, $pid); exit(125); };
local $SIG{ALRM} = sub {
    $timedout = 1;
    bigkill(shift, $pid);
    print STDERR resultline('', "Alarm timed out!  No test results for $timeout seconds.", 'FAILED')."\n";
    exit(125);
};

sub colourize($$)
{
    my ($column, $result) = @_;
    my $pass = ($result eq "ok");

    if ($istty) {
	my $dots = $columns - 15 - $column%$columns;
	$dots += $columns if ($dots < 0);
	my $leader = "."x$dots;
	my $colour = $pass ? "\e[32;1m" : "\e[31;1m";
	return "$colour$leader $result\e[0m";
    } else {
	return $result;
    }
}

sub mstime($$$)
{
    my ($floatsec, $warntime, $badtime) = @_;
    my $ms = int($floatsec * 1000);
    my $str = sprintf("%d.%03ds", $ms/1000, $ms % 1000);

    if ($istty && $ms > $badtime) {
        return ("\e[31;1m$str\e[0m", length($str));
    } elsif ($istty && $ms > $warntime) {
        return ("\e[33;1m$str\e[0m", length($str));
    } else {
        return ("$str", length($str));
    }
}

sub resultline($$$)
{
    my ($prefix, $name, $result) = @_;
    if (!defined $prefix) { $prefix = ""; }
    return sprintf("$prefix! %s %s", $name, colourize(length($prefix)+2+length($name)+1, $result));
}

my $allstart = time();
my ($start, $stop);

sub endsect()
{
    $stop = time();
    if ($start) {
	my ($time, $timelength) = mstime($stop - $start, 60000, 60000);
	printf " %s %s\n", $time, colourize($column + 2 + $timelength, "ok");
    } elsif ($column > 0) {
	print "\n";
    }
    $column = 0;
}

sub print_and_clear_log()
{
    print "\n" if ($column);
    print "v"x($columns-1) . "\n"; # Top marker
    print join("\n", @log) . "\n";
    print "^"x($columns-1) . "\n"; # Bottom marker
    $column = 0;
    @log = ();
}

alarm($timeout);
while (<$fh>)
{
    chomp;
    s/\r//g;

    if (/^(\([0-9]+\) )?\s*Testing "(.*)" in (.*):\s*$/)
    {
	$timeout = 120;
        alarm($timeout);
	my ($prefix, $sect, $file) = ($1, $2, $3);
	#$prefix = $prefix || '';
	$prefix = '';

	endsect();

	my $msg = sprintf("$prefix! %s  %s: ", $file, $sect);
	print $msg;
	$column = length($prefix.$msg);
	@log = ();
	$start = $stop;
    }
    elsif (/^(\([0-9]+\) (#   )?)?!\s*(.*?)\s+(\S+)\s*$/)
    {
        alarm($timeout);

	my ($prefix, $name, $result) = ($1, $3, $4);
	my $pass = ($result eq "ok");

	if (!$start) {
	    printf("\n! Startup: ");
	    $column = 11;
	    $start = time();
	}

	push @log, resultline($prefix, $name, $result);

	if (!$pass) {
	    $gfails++;
	    print_and_clear_log() if (@log);
	} else {
	    $gpasses++;
	    print ".";
	    $column++;
	}
    }
    elsif (/^(\([0-9]+\) (#   )?)?wvtest: timeout (\d+)\s*$/) {
	push @log, $_;
	$timeout=$3;
	alarm($timeout);
    }
    else
    {
	push @log, $_;
    }
}

endsect();

my $newpid = waitpid($pid, 0);
if ($newpid != $pid) {
    die("waitpid returned '$newpid', expected '$pid'\n");
}

my $code = $?;
my $ret = ($code >> 8);

if ($code && @log) {
    print_and_clear_log();
}

if ($ret != 0) { print STDERR resultline('', "Program returned non-zero exit code ($ret)", "FAILED")."\n"; }

# return death-from-signal exits as >128.  This is what bash does if you ran
# the program directly.
if ($code && !$ret) {
    print STDERR resultline('', "Killed by signal $code", "FAILED")."\n";
    $ret = $code | 128;
}
if ($timedout) {print STDERR resultline('', "Alarm timed out!  No test results for $timeout seconds.", 'FAILED')."\n";}

my $gtotal = $gpasses+$gfails;
printf("\nWvTest: %d test%s, %d failure%s, total time %s.\n",
    $gtotal, $gtotal==1 ? "" : "s",
    $gfails, $gfails==1 ? "" : "s",
    mstime(time() - $allstart, 60000, 600000));
print STDERR "\nWvTest result code: $ret\n";
exit( $ret ? $ret : ($gfails ? 125 : 0) );
