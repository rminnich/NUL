#!/usr/bin/python

# This script outputs the list of all tests to be executed during
# automated testing. It finds all tests (files that match *.wv) and
# sorts them according to the two lists below. Tests that are not
# found in any list are sorted to the middle in alphabetical order.
#
# The list produced by this script can by filtered to not contain
# certain tests. This is done by specifying tags of tests to be
# omitted in WVTEST_SKIP_TAGS environment variable. Tests are tagged
# by putting the tag after the name of the test in the lists below or
# by using gitattributes(5).
#
# If some test is broken in your version of qemu, just run:
# echo "path/to/test.wv broken_in_qemu" > .git/info/attributes

test_begin = """\
michal/wvtest/sizes.wv
michal/wvtest/wvtesttest.wv
alexb/apps/ipc_test/ipctest.wv
julian/apps/per-cpu-service/per-cpu-service.wv
michal/apps/echo/echotest.wv
michal/apps/echo/echo2test.wv
michal/apps/echo/echo2sstest.wv
michal/apps/echo/echo2ssnoxlate.wv
michal/apps/logdisk/part.wv
michal/apps/logdisk/gpt.wv
michal/apps/tests/timer.wv broken_in_qemu
michal/boot/diskbench-ramdisk.wv
michal/boot/diskbench-ramdisk-old.wv
michal/boot/vancouver-basicperf.wv broken_in_qemu
michal/boot/vancouver-linux-basic.wv
michal/boot/vancouver-linux-boot-time.wv
michal/boot/diskbench-vm.wv
michal/boot/vancouver-dpci.wv needs_net
michal/boot/vancouver-boot-from-disk.wv
alexb/apps/libvirt/libvirt.wv
alexb/apps/libvirt/libvirt-connect.wv slow
alexb/apps/libvirt/libvirt-start-stop.wv slow
michal/apps/echo/parentperf.wv
michal/apps/tests/pingpong.wv
michal/apps/tests/startstop.wv slow
michal/wvtest/loc.wv
"""

test_end="""\
michal/boot/kernelbuild-bare-metal.wv slow
michal/boot/vancouver-kernelbuild.wv slow
michal/boot/vancouver-kbuild-vdisk.wv slow
michal/boot/vancouver-kernelbuild-ept-no-vpid.wv slow
michal/boot/vancouver-kernelbuild-vtlb-vpid.wv slow
michal/boot/vancouver-kernelbuild-vtlb-no-vpid.wv slow
"""

import sys
import os.path
import os
import fnmatch
import string 
import subprocess

class Test(object):
    def __init__(self, line):
        words = string.split(line)
        self.name = words[0]
        self.tags = words[1:]
        try:
            p = subprocess.Popen("cd $(git rev-parse --show-toplevel) && git check-attr -a " + self.name, shell=True, stdout=subprocess.PIPE);
            for line in  p.stdout:
                words = string.split(line)
                if len(words) >= 3 and words[2] == "set":
                    self.tags.append(words[1].rstrip(':'))
        except OSError:
            pass
    def __cmp__(self, other):
        return cmp(self.name, other.name)
    def __str__(self):
        return self.name
    def has_any_of(self, tags):
        for tag in tags:
            if tag in self.tags:
                return True
        return False

class Order(object):
    def __init__(self, order):
        self.order = order
    def __cmp__(self, other):
        return cmp(self.order, other.order)
    def cmp_tests(self, a, b):
        return cmp(a, b)

class TestOrder(Order):
    def __init__(self, tests, order):
        super(TestOrder,self).__init__(order)
        self.testlist = [Test(line) for line in tests.splitlines()]
        self.testdict = {}
        i=0
        for t in self.testlist:
            self.testdict[t.name] = t
            t.num = i
            i += 1
    def __contains__(self, t):
        return t in self.testdict
    def __getitem__(self, t):
        return self.testdict[t]
    def cmp_tests(self, a, b):
        return cmp(a.num, b.num)

def cmp_tests(a, b):
    if a.name in begin_order: a_order = begin_order
    elif a.name in end_order: a_order = end_order
    else:                     a_order = middle_order
    if b.name in begin_order: b_order = begin_order
    elif b.name in end_order: b_order = end_order
    else:                     b_order = middle_order

    if a_order == b_order: return a_order.cmp_tests(a, b)
    else: return cmp(a_order, b_order)


begin_order = TestOrder(test_begin, 1)
middle_order = Order(2)
end_order   = TestOrder(test_end, 3)

thisdir=os.path.dirname(sys.argv[0])
nulroot=os.path.abspath(thisdir+"/../..")

tests = []
for root, dirs, files in os.walk(nulroot+"/"):
    if root.startswith(nulroot): root=root[len(nulroot)+1:]
    if root.startswith(".git"): continue
    for t in fnmatch.filter(files, "*.wv"):
        t = os.path.join(root, t)
        if t in begin_order: tt=begin_order[t]
        elif t in end_order: tt=end_order[t]
        else: tt = Test(t)
        tests.append(tt)

tests.sort(cmp_tests)

try:
    skiptags = string.split(os.environ["WVTEST_SKIP_TAGS"])
except KeyError:
    skiptags = []
for t in tests:
    if not t.has_any_of(skiptags):
        s = os.path.join(nulroot, t.name)
        if t.name not in begin_order and \
           t.name not in end_order and \
           sys.stdout.isatty():
            print "\x1b[1m%s\x1b[0m" % s # Highlight unknown tests
        else:
            print s
