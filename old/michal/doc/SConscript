# -*- Mode: Python -*-

def update_doxyfile(target, source, env):
    """Update the Doxyfile template with up-to-date information"""
    from subprocess import Popen, PIPE
    import os
    import string
    version = string.rstrip(Popen("git describe", shell=True, stdout=PIPE).communicate()[0])
    top = os.path.abspath("..")

    t = open(str(target[0]), 'w')
    t.write(source[0].get_text_contents())
    t.write('PROJECT_NUMBER="Version %s"\n' % version)
    t.write('STRIP_FROM_PATH="%s"\n' % top)
    t.close()    

doxyfileBuilder = Builder(action = update_doxyfile)

env=Environment(tools=['default'], toolpath='.',
                BUILDERS = {'Doxyfile' : doxyfileBuilder})
env.Append(DOXYGEN = ARGUMENTS.get('DOXYGEN', 'doxygen'))


doxyfile = env.Doxyfile('Doxyfile.tmpl')

env.Command("org-mode/lisp/org.el", [],
            "cd .. && git submodule init michal/doc/org-mode && git submodule update michal/doc/org-mode")

dox = env.Command("nul.dox", ["nul.org", "org-e-doxygen.el", "org-mode/lisp/org.el", "org-mode/contrib/lisp/org-export.el" ],
            """emacs --batch --no-site-file --no-init-file --directory ${SOURCES[2].dir} --directory ${SOURCES[3].dir} \
                     --eval "(progn (setq org-babel-load-languages '((dot . t))) \
                                    (setq org-confirm-babel-evaluate nil) (setq debug-on-error t))" \
                     --load ${SOURCES[1]} --load ${SOURCES[2]} --load ${SOURCES[3]} --visit ${SOURCES[0]} \
                     --eval "(progn (org-version) \
                                    (org-e-doxygen-export-to-doxygen nil nil nil nil \\"${TARGET.dir.abspath}\\"))" """)

if env.Detect(env["DOXYGEN"]):       # Do not fail if doxygen is not installed
    doxygen = env.Command('html/index.html', [ doxyfile, dox ],
                          "cd ${SOURCE.dir} && ${DOXYGEN} ${SOURCE.file}")
    AlwaysBuild(doxygen)
else:
    import SCons.Warnings
    SCons.Warnings.warn(SCons.Warnings.WarningOnByDefault, "doxygen executable (%s) not found - documentation won't be built" % env["DOXYGEN"])

